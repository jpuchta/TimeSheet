require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe WorkCardsController do

  after do
    WorkCard.delete_all
  end

  let(:valid_attributes) { { "start_at" => "", "end_at" => "", "pause" => ""} }
  let(:valid_attributes_2) { { "start_at" => "2014-03-01 12:31:00", "end_at" => "", "pause" => "" } }
  
  let(:valid_work_card) { mock_model(WorkCard) }
  let(:started_work_card) { mock_model(WorkCard, {:started? => true})}

  let(:valid_session) { {} }

  let(:mock_attempt_to_save_invalid_data) { WorkCard.any_instance.stub(:save).and_return(false) }


  describe "GET index" do
    it "assigns all work_cards as @work_cards" do
      work_cards = [valid_work_card]
      WorkCard.should receive(:all).and_return(work_cards)
      get :index, {}, valid_session
      expect(assigns(:work_cards)).to eq(work_cards)
    end
  end

  describe "GET show" do
    it "assigns the requested work_card as @work_card" do
      mock_model_with_find
      get :show, {:id => valid_work_card.to_param}, valid_session
      assigns(:work_card).should eq(valid_work_card)
    end
  end

  describe "GET new" do
    it "assigns a new work_card as @work_card" do
      expect(WorkCard).to receive(:new).and_return(valid_work_card)
      get :new, {}, valid_session

      expect(assigns(:work_card)).to be_a(WorkCard)
    end
  end

  describe "GET edit" do
    it "assigns the requested work_card as @work_card" do
      mock_model_with_find

      get :edit, {:id => valid_work_card.to_param}, valid_session

      expect(assigns(:work_card)).to eq(valid_work_card)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new WorkCard" do
        expect(valid_work_card).to receive(:save).and_return(true)
        expect(WorkCard).to receive(:new).and_return(valid_work_card)

        post :create, {:work_card => valid_attributes}, valid_session
      end

      it "assigns a newly created work_card as @work_card" do
        allow(valid_work_card).to receive(:save).and_return(true)
        allow(WorkCard).to receive(:new).and_return(valid_work_card)

        post :create, {:work_card => valid_attributes}, valid_session

        expect(assigns(:work_card)).to be(valid_work_card)
      end

      it "redirects to the created work_card" do
        allow(valid_work_card).to receive(:save).and_return(true)
        allow(WorkCard).to receive(:new).and_return(valid_work_card)      
 
        post :create, {:work_card => valid_attributes}, valid_session
        expect(response).to redirect_to(valid_work_card)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved work_card as @work_card" do
        mock_attempt_to_save_invalid_data
        post :create, {:work_card => { "start_at" => "invalid value" }}, valid_session
        expect(assigns(:work_card)).to be_a_new(WorkCard)
      end

      it "re-renders the 'new' template" do
        mock_attempt_to_save_invalid_data
        post :create, {:work_card => { "start_at" => "invalid value" }}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested work_card" do
        mock_model_with_find
        expect(valid_work_card).to receive(:update).with(valid_attributes_2).and_return(true)
        put :update, {:id => valid_work_card.to_param, :work_card => valid_attributes_2}, valid_session
      end

      it "assigns the requested work_card as @work_card" do
        mock_model_with_find
        allow(valid_work_card).to receive(:update).with(valid_attributes_2).and_return(true)

        put :update, {:id => valid_work_card.to_param, :work_card => valid_attributes_2}, valid_session
        expect(assigns(:work_card)).to eq(valid_work_card)
      end

      it "redirects to the work_card" do
        mock_model_with_find
        allow(valid_work_card).to receive(:update).with(valid_attributes_2).and_return(true)

        put :update, {:id => valid_work_card.to_param, :work_card => valid_attributes_2}, valid_session
        expect(response).to redirect_to(valid_work_card)
      end
    end

    describe "with invalid params" do
      it "assigns the work_card as @work_card" do
        mock_model_with_find
        allow(valid_work_card).to receive(:update).with({ "start_at" => "invalid value" }).and_return(false)

        put :update, {:id => valid_work_card.to_param, :work_card => { "start_at" => "invalid value" }}, valid_session
        expect(assigns(:work_card)).to eq(valid_work_card)
      end

      it "re-renders the 'edit' template" do
        mock_model_with_find
        allow(valid_work_card).to receive(:update).with({ "start_at" => "invalid value" }).and_return(false)

        put :update, {:id => valid_work_card.to_param, :work_card => { "start_at" => "invalid value" }}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested work_card" do
      mock_model_with_find
      
      expect(valid_work_card).to receive(:destroy)
      
      delete :destroy, {:id => valid_work_card.to_param}, valid_session
    end

    it "redirects to the work_cards list" do
      mock_model_with_find

      allow(valid_work_card).to receive(:destroy)
      
      delete :destroy, {:id => valid_work_card.to_param}, valid_session
      expect(response).to redirect_to(work_cards_url)
    end
  end

  describe "PUT start" do
    describe "for non-existing work_card" do
      it "creates a new WorkCard" do
        allow(valid_work_card).to receive(:start!).and_return(true)        
        expect(WorkCard).to receive(:new).and_return(valid_work_card)
        put :start, valid_session
      end
      it "assignsnewly created work_card as @work_card" do
        allow(valid_work_card).to receive(:start!).and_return(true)        
        allow(WorkCard).to receive(:new).and_return(valid_work_card)
        put :start, valid_session
        expect(assigns(:work_card)).to be(valid_work_card)
      end
      it "calls method .start! of the created work_card" do
        allow(WorkCard).to receive(:new).and_return(valid_work_card)
        expect(valid_work_card).to receive(:start!).and_return(true)
        put :start, valid_session
      end
      it "redirects to the newly created work_card" do
        allow(valid_work_card).to receive(:start!).and_return(true)        
        allow(WorkCard).to receive(:new).and_return(valid_work_card)
        put :start, valid_session
        expect(response).to redirect_to(valid_work_card)
      end
    end

    describe "for existing blank work_card" do
      it "does not create any new work_card" do
        mock_model_with_find
        allow(valid_work_card).to receive(:start!).and_return(true)
        WorkCard.should_not receive(:new)
        put :start, {:id => valid_work_card.to_param}, valid_session
      end
      it "assigns the requested work_card as @work_card" do
        mock_model_with_find
        allow(valid_work_card).to receive(:start!).and_return(true)
        put :start, {:id => valid_work_card.to_param}, valid_session
        expect(assigns(:work_card)).to eq(valid_work_card)
      end
      it "calls the method .start! of the requested work_card" do
        mock_model_with_find
        expect(valid_work_card).to receive(:start!).and_return(true)
        put :start, {:id => valid_work_card.to_param}, valid_session
      end
      it "redirects to the work_card" do
        mock_model_with_find
        allow(valid_work_card).to receive(:start!).and_return(true)
        put :start, {:id => valid_work_card.to_param}, valid_session
        expect(response).to redirect_to(valid_work_card)
      end

      it "can be accessed by /work_card/[:id]/start" do
        expect(put: "/work_cards/1/start").to route_to(:controller => "work_cards", :action => "start", :id => "1")
      end #generalnie nei ma sensu
    end

    describe "for existing started work_card" do
      it "does not create any new work_card" do
        mock_model_with_find(started_work_card)
        allow(started_work_card).to receive(:start!).and_return(false)
        WorkCard.should_not receive(:new)
        put :start, {:id => started_work_card.to_param}, valid_session
      end
      it "assigns the requested work_card as @work_card" do
        mock_model_with_find(started_work_card)
        allow(started_work_card).to receive(:start!).and_return(false)
        put :start, {:id => started_work_card.to_param}, valid_session
        expect(assigns(:work_card)).to eq(started_work_card)
      end
      it "calls the method .start! of the requested work_card" do
        mock_model_with_find(started_work_card)
        expect(started_work_card).to receive(:start!).and_return(false)
        put :start, {:id => started_work_card.to_param}, valid_session
      end
      it "redirects to the work_card" do
        mock_model_with_find(started_work_card)
        allow(started_work_card).to receive(:start!).and_return(false)
        put :start, {:id => started_work_card.to_param}, valid_session
        expect(response).to redirect_to(started_work_card)
      end
    end
  end

  describe "PUT finish" do
    describe "for finishable work_card" do
      it "assigns the requested work_card as @work_card" do
        mock_model_with_find(started_work_card)
        allow(started_work_card).to receive(:finish!).and_return(true)
        put :finish, {:id => started_work_card.to_param}, valid_session
        expect(assigns(:work_card)).to eq(started_work_card)
      end
      it "calls the method .finish! of the requested work_card" do
        mock_model_with_find(started_work_card)
        expect(started_work_card).to receive(:finish!).and_return(true)
        put :finish, {:id => started_work_card.to_param}, valid_session
      end
      it "redirects to the work_card" do
        mock_model_with_find(started_work_card)
        allow(started_work_card).to receive(:finish!).and_return(true)
        put :finish, {:id => started_work_card.to_param}, valid_session
        expect(response).to redirect_to(started_work_card)
      end
      it "should have notice 'finished succesfully'" do
        mock_model_with_find(started_work_card)
        allow(started_work_card).to receive(:finish!).and_return(true)
        put :finish, {:id => started_work_card.to_param}, valid_session
        expect(flash[:notice]).to eq('Work card was successfully finished.')
      end
    end
    describe "for unfinishable work_card" do
      it "assigns the requested work_card as @work_card" do
        mock_model_with_find
        allow(valid_work_card).to receive(:finish!).and_return(false)
        put :finish, {:id => valid_work_card.to_param}, valid_session
        expect(assigns(:work_card)).to eq(valid_work_card)
      end
      it "calls the method .finish! of the requested work_card" do
        mock_model_with_find
        expect(valid_work_card).to receive(:finish!).and_return(false)
        put :finish, {:id => valid_work_card.to_param}, valid_session
      end
      it "redirects to the work_card" do  #I do not know, how to use mocks here?
        mock_model_with_find
        allow(valid_work_card).to receive(:finish!).and_return(false)
        put :finish, {:id => valid_work_card.to_param}, valid_session
        expect(response).to redirect_to(valid_work_card)
      end
      it "should not have notice 'finished succesfully'" do
        mock_model_with_find
        allow(valid_work_card).to receive(:finish!).and_return(false)
        put :finish, {:id => valid_work_card.to_param}, valid_session
        expect(flash[:notice]).to_not eq('Work card was successfully finished.')
      end
    end
  end



  def mock_model_with_find(model=valid_work_card)
     WorkCard.should receive(:find).with(model.to_param).and_return(model)
  end

end
